<!DOCTYPE html>
<html>
<head>
  <title>Line Pay</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0" crossorigin="anonymous">
  <!-- <link rel="stylesheet" href="/styles.css"> -->
  <style>
    /* body {
      background-color: #f8f9fa;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      height: 100vh;
      margin: 0;
      padding-top: 20px;
    }
    .btn {
      width: 200px;
      margin-top: 20px;
    } */
    ins {
      font-weight: bold;
    }
    label {
      font-weight: bold;
    }
  </style>
</head>
<body>
    <h1>Line Pay (FIDO)</h2>
    <label for="username">使用者名稱</label>
    <input type="text" name="username" id="username" />
    <div class="username error"></div>

    <!-- 進階設定 -->
    <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
        進階設定
    </button>
    <div class="collapse" id="collapseExample">
      <div class="card card-body">
        <ins>Registration Settings</ins>
        <!-- User Verification -->
        <label for="optRegUserVerification">
          User Verification
        </label>
          <select name="optRegUserVerification" id="optRegUserVerification">
            <option value="discouraged">Discouraged</option>
            <option value="preferred" selected>Preferred</option>
            <option value="required">Required</option>
          </select>
        <p>Whether a biometric/PIN check is required or not. This filters out security keys not having this capability.</p>

        <!-- Attachment -->
        <label for="attachment">
          Attachment
        </label>
          <select name="attachment" id="attachment">
            <option value="all" selected>All Supported</option>
            <option value="cross_platform">Cross-Platform</option>
            <option value="platform">Platform</option>
          </select>
        <p>Describe authenticators' attachment modalities</p>

        <!-- Discoverable Credential -->
        <label for="discoverableCredential">
          Discoverable Credential
        </label>
          <select name="discoverableCredential" id="discoverableCredential">
            <option value="discouraged">Discouraged</option>
            <option value="preferred" selected>Preferred</option>
            <option value="required">Required</option>
          </select>
        <p>A "discoverable" credential can be selected using `authenticate(...)` without providing credential IDs. Instead, a native pop-up will appear for user selection. This may have an impact on the "passkeys" user experience and syncing behavior of the key.</p>

        <!-- Attestation dropdown -->
        <label for="attestation">
          Attestation
        </label>
          <select name="attestation" id="attestation">
            <option value="none" selected>None</option>
            <option value="direct">Direct</option>
          </select>
        <p>The attestation data that is returned from the authenticator has information that could be used to track users. This option allows servers to indicate how important the attestation data is to this registration event.</p>

        <!-- Public Key Algorithms -->
        <label for="pubKeyAlgo">
          Public Key Algorithms (Multi-select enabled)
        </label>
        <div class="form-check" name="pubKeyAlgo" id="pubKeyAlgo">
          <input type="checkbox" value="-8" id="optAlgEd25519"> Ed25519
          <input type="checkbox" value="-7" id="optAlgES256"> ES256
          <input type="checkbox" value="-257" id="optAlgRS256"> RS256
        </div>
        <p>This is an array of objects describing what public key types are acceptable to a server.</p>

        <!-- Registration Hints (most to least preferred) -->
        <label for="registrationHints">
          Registration Hints (Optional, from most to least preferred)
        </label>
        <div class="form-check" name="registrationHints" id="registrationHints">
          <input type="checkbox" value="security-key" id="securityKey"> Security Key
          <input type="checkbox" value="client-device" id="clientDevice"> Client Device
          <input type="checkbox" value="hybrid" id="hybrid"> Hybrid
        </div>
        <p>WebAuthn Relying Parties may use this enumeration to communicate hints to the user-agent about how a request may be best completed.</p>
        <p>Order: <span id="orderDisplay" style="color: lightgrey;"></span></p>

        <ins>Authentication Settings</ins>
        <!-- User Verification -->
        <label for="optAuthUserVerification">
          User Verification
        </label>
        <select name="optAuthUserVerification" id="optAuthUserVerification">
          <option value="discouraged">Discouraged</option>
          <option value="preferred" selected>Preferred</option>
          <option value="required">Required</option>
        </select>

        <button class="btn btn-warning" onclick="location.reload();">
          重新設定
        </button>
      </div>
    </div>
  
    <div>
      <button class="btn btn-success" id="fido_register" onclick="attestation()">確認</button>
    </div>

</body>
<!-- 引入 Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js" integrity="sha384-p34f1UUtsS3wqzfto5wAAmdvj+osOnFyQFpp4Ua3gs/ZVWx6oOypYoCJhGGScy+8" crossorigin="anonymous"></script>
<script src="https://unpkg.com/@simplewebauthn/browser/dist/bundle/index.umd.min.js"></script>
<script>
  // Registration Hints Order
  let regHintsOrder = [];
  document.getElementsByName('registrationHints')[0].addEventListener('change', function(event) {
      if (event.target.checked) {
          regHintsOrder.push(event.target.value);
      } else {
          regHintsOrder = regHintsOrder.filter(item => item !== event.target.value);
      }
      document.getElementById('orderDisplay').textContent = regHintsOrder.join(', ');
  });
  
  async function attestation() {
    try {
      let username = document.getElementById('username').value;
      let regUserVerification = document.getElementById('optRegUserVerification').value;
      let attachment = document.getElementById('attachment').value;
      let discoverableCredential = document.getElementById('discoverableCredential').value;
      let attestation = document.getElementById('attestation').value;
      const pubKeyAlgo = [];
      let algEd25519 = document.getElementById('optAlgEd25519');
      let algES256 = document.getElementById('optAlgES256');
      let algRS256 = document.getElementById('optAlgRS256');
      if (algEd25519.checked) pubKeyAlgo.push(algEd25519.value);
      if (algES256.checked) pubKeyAlgo.push(algES256.value);
      if (algRS256.checked) pubKeyAlgo.push(algRS256.value);
      let regHints = document.getElementById('orderDisplay').textContent;

      const { startRegistration } = SimpleWebAuthnBrowser;
      // GET registration options from the endpoint that calls
      // @simplewebauthn/server -> generateRegistrationOptions()
      const resp = await fetch('/line_pay/attestation/options', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            username,
            // e.g. 'preferred'
            user_verification: regUserVerification,
            // e.g. 'direct'
            attestation,
            // e.g. 'platform'
            attachment,
            // e.g. ['es256', 'rs256']
            algorithms: pubKeyAlgo,
            // e.g. 'preferred'
            discoverable_credential: discoverableCredential,
            // e.g. ['security-key', 'hybrid']
            hints: regHints,
        }),
      });
      // Pass the options to the authenticator and wait for a response
      const attRespJSON = await resp.json();
      const attResp = await startRegistration(attRespJSON);

      // POST the response to the endpoint that calls
      // @simplewebauthn/server -> verifyRegistrationResponse()
      const verificationResp = await fetch('/line_pay/attestation/result', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          attResp,
          userID: attRespJSON.user.id,
        }),
      });
      // Wait for the results of verification
      const verificationJSON = await verificationResp.json();
      if (verificationJSON && verificationJSON.verified) {
        window.alert('Registration successful!');
        location.assign("/line_pay/login");
      } else {
        window.alert('Registration failed!');
        location.reload();
      }

    } catch (err) {
      console.log(err.message);
      window.alert(err.message);
    }
  }
</script>
</html>